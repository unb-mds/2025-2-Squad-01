name: Coletar métricas da organização

on:
  workflow_dispatch:


permissions:
  contents: write
  

jobs:
  metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Mostrar variáveis automáticas
        run: |
          echo "Repositório: ${{ github.repository }}"
          echo "Organização: ${{ github.repository_owner }}"
          echo "Autor do evento: ${{ github.actor }}"
          echo "Branch: ${{ github.ref }}"

      - name: Preparar estrutura de diretórios
        run: |
          echo "Verificando se o diretório src/data existe..."
          if [ ! -d "src/data" ]; then
            echo "Criando diretório src/data..."
            mkdir -p src/data
          else
            echo "Diretório src/data já existe."
          fi
          
      - name: Verificar o local do fork do repositório
        run: |
          TYPE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/users/${{ github.repository_owner }} | jq -r .type)
          
          if [ "$TYPE" = "Organization" ]; then
            echo "Fork condiz com os parametros de organização. Seguindo com a execução..."
          else
            echo "ERROR: O tipo do dono do repositório é $TYPE, esperado "Organization". Certifique-se que o fork do repositório foi feito para dentro de uma organização e não um repositório pessoal."
            exit 1
          fi

      - name: Verificar arquivo criado
        run: |
          echo "Verificando se o arquivo foi criado com sucesso..."
          if [ -f "src/data/org_repos.json" ]; then
            echo "Arquivo org_repos.json criado com sucesso!"
            echo "Tamanho do arquivo: $(wc -c < src/data/org_repos.json) bytes"
            echo "Número de repositórios encontrados: $(jq length src/data/org_repos.json 2>/dev/null || echo 'Erro ao contar repositórios')"
          else
            echo " Observação: Arquivo org_repos.json não foi criado! Criando arquivo vazio para evitar falhas."
            echo '[]' > src/data/org_repos.json
            echo "Tamanho do arquivo: $(wc -c < src/data/org_repos.json) bytes"
            echo "Número de repositórios encontrados: $(jq length src/data/org_repos.json 2>/dev/null || echo 'Erro ao contar repositórios')"
          fi

      - name: Chamada API autenticada
        run: |
          echo "Fazendo chamada para a API do GitHub..."
          HTTP_STATUS=$(curl -s -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               https://api.github.com/orgs/${{ github.repository_owner }}/repos \
               -o src/data/org_repos.json)
          
          echo "Status HTTP da resposta: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "API retornou sucesso (200)"
          else
            echo "API retornou erro: $HTTP_STATUS"
            echo "Conteúdo da resposta:"
            cat src/data/org_repos.json
            exit 1
          fi


      - name: Commitando mudanças para o repositório
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add src/data/org_repos.json
          if ! git diff --cached --quiet; then
            git commit -m "[GITHUB_ACTIONS_BOT] Adicionando o arquivo org_repos.json ao repositório"
            git push
          else
            echo "Nenhuma mudança para commitar. Pulando commit e push."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

